<?php
/*
 * Generated by PEG.js 0.8.0. with php-pegjs plugin
 *
 * http://pegjs.majda.cz/
 */

namespace fitch\parser;

/* Usefull functions: */

/* chr_unicode - get unicode character from its char code */
if (!function_exists('fitch\parser\\chr_unicode')) { function chr_unicode($code) { return mb_convert_encoding('&#' . $code . ';', 'UTF-8', 'HTML-ENTITIES');} }
/* peg_regex_test - multibyte regex test */
if (!function_exists('fitch\parser\\peg_regex_test')) { function peg_regex_test($pattern, $string) { if (substr($pattern, -1) == 'i') return mb_eregi(substr($pattern, 1, -2), $string); else return mb_ereg(substr($pattern, 1, -1), $string);}}

/* Syntax error exception */
if (!class_exists("fitch\parser\\SyntaxError", false)){
class SyntaxError extends \Exception
{
    public $expected;
    public $found;
    public $grammarOffset;
    public $grammarLine;
    public $grammarColumn;
    public $name;
    public function __construct($message, $expected, $found, $offset, $line, $column)
    {
        parent::__construct($message, 0, null);
        $this->expected = $expected;
        $this->found = $found;
        $this->grammarOffset = $offset;
        $this->grammarLine = $line;
        $this->grammarColumn = $column;
        $this->name = "SyntaxError";
    }
};}

class Parser{


    private $peg_currPos          = 0;
    private $peg_reportedPos      = 0;
    private $peg_cachedPos        = 0;
    private $peg_cachedPosDetails = array('line' => 1, 'column' => 1, 'seenCR' => false );
    private $peg_maxFailPos       = 0;
    private $peg_maxFailExpected  = array();
    private $peg_silentFails      = 0;
    private $input                = "";


    private function cleanup_state(){
      $this->peg_currPos          = 0;
      $this->peg_reportedPos      = 0;
      $this->peg_cachedPos        = 0;
      $this->peg_cachedPosDetails = array('line' => 1, 'column' => 1, 'seenCR' => false );
      $this->peg_maxFailPos       = 0;
      $this->peg_maxFailExpected  = array();
      $this->peg_silentFails      = 0;
      $this->input                = "";

    }


    private function text() {
      return substr($this->input, $this->peg_reportedPos, $this->peg_reportedPos + $this->peg_currPos);
    }

    private function offset() {
      return $this->peg_reportedPos;
    }

    private function line() {
      $compute_pd = $this->peg_computePosDetails($this->peg_reportedPos);
      return $compute_pd["line"];
    }

    private function column() {
      $compute_pd = $this->peg_computePosDetails($this->peg_reportedPos);
      return $compute_pd["column"];
    }

    private function expected($description) {
      throw $this->peg_buildException(
        null,
        array(array("type" => "other", "description" => $description )),
        $this->peg_reportedPos
      );
    }

    private function error($message) {
      throw $this->peg_buildException($message, null, $this->peg_reportedPos);
    }

    private function peg_computePosDetails($pos) {
      $self = $this;
      $advance = function(&$details, $startPos, $endPos) use($self) {
        for ($p = $startPos; $p < $endPos; $p++) {
          $ch = mb_substr($self->input, $p, 1, "UTF-8");
          if ($ch === "\n") {
            if (!$details["seenCR"]) { $details["line"]++; }
            $details["column"] = 1;
            $details["seenCR"] = false;
          } else if ($ch === "\r" || $ch === "\u2028" || $ch === "\u2029") {
            $details["line"]++;
            $details["column"] = 1;
            $details["seenCR"] = true;
          } else {
            $details["column"]++;
            $details["seenCR"] = false;
          }
        }
      };

      if ($this->peg_cachedPos !== $pos) {
        if ($this->peg_cachedPos > $pos) {
          $this->peg_cachedPos = 0;
          $this->peg_cachedPosDetails = array( "line" => 1, "column" => 1, "seenCR" => false );
        }
        $advance($this->peg_cachedPosDetails, $this->peg_cachedPos, $pos);
        $this->peg_cachedPos = $pos;
      }

      return $this->peg_cachedPosDetails;
    }

    private function peg_fail($expected) {
      if ($this->peg_currPos < $this->peg_maxFailPos) { return; }

      if ($this->peg_currPos > $this->peg_maxFailPos) {
        $this->peg_maxFailPos = $this->peg_currPos;
        $this->peg_maxFailExpected = array();
      }

      $this->peg_maxFailExpected[] = $expected;
    }

    private function peg_buildException($message, $expected, $pos) {
      $cleanupExpected = function (&$expected){
        $i = 1;

        usort($expected, function($a, $b) {
          if ($a["description"] < $b["description"]) {
            return -1;
          } else if ($a["description"] > $b["description"]) {
            return 1;
          } else {
            return 0;
          }
        });

        while ($i < count($expected)) {
          if ($expected[$i - 1] === $expected[$i]) {
            array_splice($expected, $i, 1);
          } else {
            $i++;
          }
        }
      };

      $buildMessage = function ($expected, $found) {
        $stringEscape = function ($s) {
          $hex = function($ch) { return strtoupper(dechex(ord($ch[0])));};

            $s = str_replace("\\",   "\\\\", $s);
            $s = str_replace("\"",    "\\\"", $s);
            $s = str_replace('\x08', '\\b', $s);
            $s = str_replace('\t',   '\\t', $s);
            $s = str_replace('\n',   '\\n', $s);
            $s = str_replace('\f',   '\\f', $s);
            $s = str_replace('\r',   '\\r', $s);
            $s = preg_replace_callback('/[\\x00-\\x07\\x0B\\x0E\\x0F]/u', function($ch) use($hex) { return '\\x0' + $hex($ch[0]); }, $s);
            $s = preg_replace_callback('/[\\x10-\\x1F\\x80-\\xFF]/u',     function($ch) use($hex) { return '\\x'  + $hex($ch[0]); }, $s);
            return $s;
        };

        $expectedDescs = array_fill(0, count($expected), null);

        for ($i = 0; $i < count($expected); $i++) {
          $expectedDescs[$i] = $expected[$i]["description"];
        }

        $expectedDesc = count($expected) > 1
          ? join(", ", array_slice($expectedDescs, 0, -1))
              . " or "
              . $expectedDescs[count($expected) - 1]
          : $expectedDescs[0];

        $foundDesc = $found ? "\"" . $stringEscape($found) . "\"" : "end of input";

        return "Expected " . $expectedDesc . " but " . $foundDesc . " found.";
      };

      $posDetails = $this->peg_computePosDetails($pos);
      $found      = $pos < mb_strlen($this->input, "UTF-8") ? mb_substr($this->input, $pos, 1, "UTF-8") : null;

      if ($expected !== null) {
        $cleanupExpected($expected);
      }

      return new SyntaxError(
        $message !== null ? $message : $buildMessage($expected, $found),
        $expected,
        $found,
        $pos,
        $posDetails["line"],
        $posDetails["column"]
      );
    }

    private $peg_FAILED;
    private $peg_c0;
    private $peg_c1;
    private $peg_c2;
    private $peg_c3;
    private $peg_c4;
    private $peg_c5;
    private $peg_c6;
    private $peg_c7;
    private $peg_c8;
    private $peg_c9;
    private $peg_c10;
    private $peg_c11;
    private $peg_c12;
    private $peg_c13;
    private $peg_c14;
    private $peg_c15;
    private $peg_c16;
    private $peg_c17;
    private $peg_c18;
    private $peg_c19;
    private $peg_c20;
    private $peg_c21;
    private $peg_c22;
    private $peg_c23;
    private $peg_c24;
    private $peg_c25;
    private $peg_c26;
    private $peg_c27;
    private $peg_c28;
    private $peg_c29;
    private $peg_c30;
    private $peg_c31;
    private $peg_c32;
    private $peg_c33;
    private $peg_c34;
    private $peg_c35;
    private $peg_c36;
    private $peg_c37;
    private $peg_c38;
    private $peg_c39;
    private $peg_c40;
    private $peg_c41;
    private $peg_c42;
    private $peg_c43;
    private $peg_c44;
    private $peg_c45;
    private $peg_c46;
    private $peg_c47;
    private $peg_c48;
    private $peg_c49;
    private $peg_c50;
    private $peg_c51;
    private $peg_c52;
    private $peg_c53;
    private $peg_c54;
    private $peg_c55;
    private $peg_c56;
    private $peg_c57;
    private $peg_c58;
    private $peg_c59;
    private $peg_c60;
    private $peg_c61;
    private $peg_c62;
    private $peg_c63;
    private $peg_c64;
    private $peg_c65;
    private $peg_c66;
    private $peg_c67;
    private $peg_c68;
    private $peg_c69;
    private $peg_c70;
    private $peg_c71;
    private $peg_c72;
    private $peg_c73;
    private $peg_c74;
    private $peg_c75;
    private $peg_c76;
    private $peg_c77;
    private $peg_c78;
    private $peg_c79;
    private $peg_c80;
    private $peg_c81;
    private $peg_c82;
    private $peg_c83;
    private $peg_c84;
    private $peg_c85;
    private $peg_c86;
    private $peg_c87;
    private $peg_c88;
    private $peg_c89;
    private $peg_c90;
    private $peg_c91;
    private $peg_c92;
    private $peg_c93;
    private $peg_c94;
    private $peg_c95;
    private $peg_c96;
    private $peg_c97;
    private $peg_c98;
    private $peg_c99;
    private $peg_c100;
    private $peg_c101;
    private $peg_c102;
    private $peg_c103;
    private $peg_c104;
    private $peg_c105;
    private $peg_c106;
    private $peg_c107;
    private $peg_c108;
    private $peg_c109;
    private $peg_c110;
    private $peg_c111;
    private $peg_c112;
    private $peg_c113;
    private $peg_c114;
    private $peg_c115;
    private $peg_c116;
    private $peg_c117;
    private $peg_c118;
    private $peg_c119;
    private $peg_c120;
    private $peg_c121;
    private $peg_c122;
    private $peg_c123;
    private $peg_c124;
    private $peg_c125;
    private $peg_c126;
    private $peg_c127;
    private $peg_c128;
    private $peg_c129;
    private $peg_c130;
    private $peg_c131;
    private $peg_c132;
    private $peg_c133;
    private $peg_c134;

    private function peg_parsestart() {

      $s0 = $this->peg_parseSegment();
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_parseFieldBlock();
      }

      return $s0;
    }

    private function peg_parseSegment() {

      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c1) {
        $s1 = $this->peg_c1;
        $this->peg_currPos++;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c2); }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parseDottedIdentifier();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_currPos;
          if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c4) {
            $s4 = $this->peg_c4;
            $this->peg_currPos++;
          } else {
            $s4 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c5); }
          }
          if ($s4 !== $this->peg_FAILED) {
            $s5 = $this->peg_parseLocatorList();
            if ($s5 !== $this->peg_FAILED) {
              if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c6) {
                $s6 = $this->peg_c6;
                $this->peg_currPos++;
              } else {
                $s6 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c7); }
              }
              if ($s6 !== $this->peg_FAILED) {
                $s4 = array($s4, $s5, $s6);
                $s3 = $s4;
              } else {
                $this->peg_currPos = $s3;
                $s3 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s3;
              $s3 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s3;
            $s3 = $this->peg_c0;
          }
          if ($s3 === $this->peg_FAILED) {
            $s3 = $this->peg_c3;
          }
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_parseFunctionList();
            if ($s4 === $this->peg_FAILED) {
              $s4 = $this->peg_c3;
            }
            if ($s4 !== $this->peg_FAILED) {
              $s5 = $this->peg_parsewhitespaces();
              if ($s5 === $this->peg_FAILED) {
                $s5 = $this->peg_c3;
              }
              if ($s5 !== $this->peg_FAILED) {
                $s6 = $this->peg_parseFieldBlock();
                if ($s6 === $this->peg_FAILED) {
                  $s6 = $this->peg_c3;
                }
                if ($s6 !== $this->peg_FAILED) {
                  $s7 = $this->peg_parseConditionList();
                  if ($s7 === $this->peg_FAILED) {
                    $s7 = $this->peg_c3;
                  }
                  if ($s7 !== $this->peg_FAILED) {
                    $this->peg_reportedPos = $s0;
                    $s1 = call_user_func($this->peg_c8,$s2, $s3, $s4, $s6, $s7);
                    $s0 = $s1;
                  } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_c0;
                  }
                } else {
                  $this->peg_currPos = $s0;
                  $s0 = $this->peg_c0;
                }
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }

      return $s0;
    }

    private function peg_parseConditionList() {

      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c9) {
        $s1 = $this->peg_c9;
        $this->peg_currPos++;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c10); }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parseCondition();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_c11;
          $s4 = $this->peg_currPos;
          if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c12) {
            $s5 = $this->peg_c12;
            $this->peg_currPos++;
          } else {
            $s5 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c13); }
          }
          if ($s5 !== $this->peg_FAILED) {
            $s6 = $this->peg_parseCondition();
            if ($s6 !== $this->peg_FAILED) {
              $s5 = array($s5, $s6);
              $s4 = $s5;
            } else {
              $this->peg_currPos = $s4;
              $s4 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s4;
            $s4 = $this->peg_c0;
          }
          while ($s4 !== $this->peg_FAILED) {
            $s3[] = $s4;
            $s4 = $this->peg_currPos;
            if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c12) {
              $s5 = $this->peg_c12;
              $this->peg_currPos++;
            } else {
              $s5 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c13); }
            }
            if ($s5 !== $this->peg_FAILED) {
              $s6 = $this->peg_parseCondition();
              if ($s6 !== $this->peg_FAILED) {
                $s5 = array($s5, $s6);
                $s4 = $s5;
              } else {
                $this->peg_currPos = $s4;
                $s4 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s4;
              $s4 = $this->peg_c0;
            }
          }
          if ($s3 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = call_user_func($this->peg_c14,$s2, $s3);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }

      return $s0;
    }

    private function peg_parseCondition() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseDottedIdentifier();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parseOperator();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseValue();
          if ($s3 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = call_user_func($this->peg_c15,$s1, $s2, $s3);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }

      return $s0;
    }

    private function peg_parseFieldBlock() {

      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c16) {
        $s1 = $this->peg_c16;
        $this->peg_currPos++;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c17); }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parseFieldList();
        if ($s2 !== $this->peg_FAILED) {
          if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c18) {
            $s3 = $this->peg_c18;
            $this->peg_currPos++;
          } else {
            $s3 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c19); }
          }
          if ($s3 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = call_user_func($this->peg_c20,$s2);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }

      return $s0;
    }

    private function peg_parseFunctionList() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_c11;
      $s2 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c21) {
        $s3 = $this->peg_c21;
        $this->peg_currPos++;
      } else {
        $s3 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c22); }
      }
      if ($s3 !== $this->peg_FAILED) {
        $s4 = $this->peg_parseFunction();
        if ($s4 !== $this->peg_FAILED) {
          $s3 = array($s3, $s4);
          $s2 = $s3;
        } else {
          $this->peg_currPos = $s2;
          $s2 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s2;
        $s2 = $this->peg_c0;
      }
      while ($s2 !== $this->peg_FAILED) {
        $s1[] = $s2;
        $s2 = $this->peg_currPos;
        if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c21) {
          $s3 = $this->peg_c21;
          $this->peg_currPos++;
        } else {
          $s3 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c22); }
        }
        if ($s3 !== $this->peg_FAILED) {
          $s4 = $this->peg_parseFunction();
          if ($s4 !== $this->peg_FAILED) {
            $s3 = array($s3, $s4);
            $s2 = $s3;
          } else {
            $this->peg_currPos = $s2;
            $s2 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s2;
          $s2 = $this->peg_c0;
        }
      }
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $s0;
        $s1 = call_user_func($this->peg_c23,$s1);
      }
      $s0 = $s1;

      return $s0;
    }

    private function peg_parseFunction() {

      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 4, "UTF-8") === $this->peg_c24) {
        $s1 = $this->peg_c24;
        $this->peg_currPos += 4;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c25); }
      }
      if ($s1 !== $this->peg_FAILED) {
        if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c26) {
          $s2 = $this->peg_c26;
          $this->peg_currPos++;
        } else {
          $s2 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c27); }
        }
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseSortList();
          if ($s3 === $this->peg_FAILED) {
            $s3 = $this->peg_c3;
          }
          if ($s3 !== $this->peg_FAILED) {
            if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c28) {
              $s4 = $this->peg_c28;
              $this->peg_currPos++;
            } else {
              $s4 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c29); }
            }
            if ($s4 !== $this->peg_FAILED) {
              $this->peg_reportedPos = $s0;
              $s1 = call_user_func($this->peg_c30,$s1, $s3);
              $s0 = $s1;
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        $s1 = $this->peg_parseIdentifier();
        if ($s1 !== $this->peg_FAILED) {
          if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c26) {
            $s2 = $this->peg_c26;
            $this->peg_currPos++;
          } else {
            $s2 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c27); }
          }
          if ($s2 !== $this->peg_FAILED) {
            $s3 = $this->peg_parseArgumentList();
            if ($s3 === $this->peg_FAILED) {
              $s3 = $this->peg_c3;
            }
            if ($s3 !== $this->peg_FAILED) {
              if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c28) {
                $s4 = $this->peg_c28;
                $this->peg_currPos++;
              } else {
                $s4 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c29); }
              }
              if ($s4 !== $this->peg_FAILED) {
                $this->peg_reportedPos = $s0;
                $s1 = call_user_func($this->peg_c30,$s1, $s3);
                $s0 = $s1;
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      }

      return $s0;
    }

    private function peg_parseSortDirection() {

      if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c31) {
        $s0 = $this->peg_c31;
        $this->peg_currPos++;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c32); }
      }
      if ($s0 === $this->peg_FAILED) {
        if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c33) {
          $s0 = $this->peg_c33;
          $this->peg_currPos++;
        } else {
          $s0 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c34); }
        }
      }

      return $s0;
    }

    private function peg_parseLocator() {

      $s0 = $this->peg_parseValue();
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_parseIdentifier();
      }

      return $s0;
    }

    private function peg_parseLocatorList() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseLocator();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_c11;
        $s3 = $this->peg_currPos;
        $s4 = $this->peg_parsewhitespaces();
        if ($s4 === $this->peg_FAILED) {
          $s4 = $this->peg_c3;
        }
        if ($s4 !== $this->peg_FAILED) {
          if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c35) {
            $s5 = $this->peg_c35;
            $this->peg_currPos++;
          } else {
            $s5 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c36); }
          }
          if ($s5 !== $this->peg_FAILED) {
            $s6 = $this->peg_parsewhitespaces();
            if ($s6 === $this->peg_FAILED) {
              $s6 = $this->peg_c3;
            }
            if ($s6 !== $this->peg_FAILED) {
              $s7 = $this->peg_parseLocator();
              if ($s7 !== $this->peg_FAILED) {
                $s4 = array($s4, $s5, $s6, $s7);
                $s3 = $s4;
              } else {
                $this->peg_currPos = $s3;
                $s3 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s3;
              $s3 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s3;
            $s3 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s3;
          $s3 = $this->peg_c0;
        }
        while ($s3 !== $this->peg_FAILED) {
          $s2[] = $s3;
          $s3 = $this->peg_currPos;
          $s4 = $this->peg_parsewhitespaces();
          if ($s4 === $this->peg_FAILED) {
            $s4 = $this->peg_c3;
          }
          if ($s4 !== $this->peg_FAILED) {
            if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c35) {
              $s5 = $this->peg_c35;
              $this->peg_currPos++;
            } else {
              $s5 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c36); }
            }
            if ($s5 !== $this->peg_FAILED) {
              $s6 = $this->peg_parsewhitespaces();
              if ($s6 === $this->peg_FAILED) {
                $s6 = $this->peg_c3;
              }
              if ($s6 !== $this->peg_FAILED) {
                $s7 = $this->peg_parseLocator();
                if ($s7 !== $this->peg_FAILED) {
                  $s4 = array($s4, $s5, $s6, $s7);
                  $s3 = $s4;
                } else {
                  $this->peg_currPos = $s3;
                  $s3 = $this->peg_c0;
                }
              } else {
                $this->peg_currPos = $s3;
                $s3 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s3;
              $s3 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s3;
            $s3 = $this->peg_c0;
          }
        }
        if ($s2 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = call_user_func($this->peg_c37,$s1, $s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }

      return $s0;
    }

    private function peg_parseSortList() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_currPos;
      $s2 = $this->peg_parseColumnIdentifier();
      if ($s2 !== $this->peg_FAILED) {
        $s3 = $this->peg_parseSortDirection();
        if ($s3 === $this->peg_FAILED) {
          $s3 = $this->peg_c3;
        }
        if ($s3 !== $this->peg_FAILED) {
          $s2 = array($s2, $s3);
          $s1 = $s2;
        } else {
          $this->peg_currPos = $s1;
          $s1 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s1;
        $s1 = $this->peg_c0;
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parsewhitespaces();
        if ($s2 === $this->peg_FAILED) {
          $s2 = $this->peg_c3;
        }
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_c11;
          $s4 = $this->peg_currPos;
          if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c35) {
            $s5 = $this->peg_c35;
            $this->peg_currPos++;
          } else {
            $s5 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c36); }
          }
          if ($s5 !== $this->peg_FAILED) {
            $s6 = $this->peg_parsewhitespaces();
            if ($s6 === $this->peg_FAILED) {
              $s6 = $this->peg_c3;
            }
            if ($s6 !== $this->peg_FAILED) {
              $s7 = $this->peg_currPos;
              $s8 = $this->peg_parseColumnIdentifier();
              if ($s8 !== $this->peg_FAILED) {
                $s9 = $this->peg_parseSortDirection();
                if ($s9 === $this->peg_FAILED) {
                  $s9 = $this->peg_c3;
                }
                if ($s9 !== $this->peg_FAILED) {
                  $s8 = array($s8, $s9);
                  $s7 = $s8;
                } else {
                  $this->peg_currPos = $s7;
                  $s7 = $this->peg_c0;
                }
              } else {
                $this->peg_currPos = $s7;
                $s7 = $this->peg_c0;
              }
              if ($s7 !== $this->peg_FAILED) {
                $s5 = array($s5, $s6, $s7);
                $s4 = $s5;
              } else {
                $this->peg_currPos = $s4;
                $s4 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s4;
              $s4 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s4;
            $s4 = $this->peg_c0;
          }
          while ($s4 !== $this->peg_FAILED) {
            $s3[] = $s4;
            $s4 = $this->peg_currPos;
            if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c35) {
              $s5 = $this->peg_c35;
              $this->peg_currPos++;
            } else {
              $s5 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c36); }
            }
            if ($s5 !== $this->peg_FAILED) {
              $s6 = $this->peg_parsewhitespaces();
              if ($s6 === $this->peg_FAILED) {
                $s6 = $this->peg_c3;
              }
              if ($s6 !== $this->peg_FAILED) {
                $s7 = $this->peg_currPos;
                $s8 = $this->peg_parseColumnIdentifier();
                if ($s8 !== $this->peg_FAILED) {
                  $s9 = $this->peg_parseSortDirection();
                  if ($s9 === $this->peg_FAILED) {
                    $s9 = $this->peg_c3;
                  }
                  if ($s9 !== $this->peg_FAILED) {
                    $s8 = array($s8, $s9);
                    $s7 = $s8;
                  } else {
                    $this->peg_currPos = $s7;
                    $s7 = $this->peg_c0;
                  }
                } else {
                  $this->peg_currPos = $s7;
                  $s7 = $this->peg_c0;
                }
                if ($s7 !== $this->peg_FAILED) {
                  $s5 = array($s5, $s6, $s7);
                  $s4 = $s5;
                } else {
                  $this->peg_currPos = $s4;
                  $s4 = $this->peg_c0;
                }
              } else {
                $this->peg_currPos = $s4;
                $s4 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s4;
              $s4 = $this->peg_c0;
            }
          }
          if ($s3 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = call_user_func($this->peg_c38,$s1, $s3);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }

      return $s0;
    }

    private function peg_parseArgumentList() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseLocator();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_c11;
        $s3 = $this->peg_currPos;
        $s4 = $this->peg_parsewhitespaces();
        if ($s4 === $this->peg_FAILED) {
          $s4 = $this->peg_c3;
        }
        if ($s4 !== $this->peg_FAILED) {
          if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c35) {
            $s5 = $this->peg_c35;
            $this->peg_currPos++;
          } else {
            $s5 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c36); }
          }
          if ($s5 !== $this->peg_FAILED) {
            $s6 = $this->peg_parseLocator();
            if ($s6 !== $this->peg_FAILED) {
              $s7 = $this->peg_parsewhitespaces();
              if ($s7 === $this->peg_FAILED) {
                $s7 = $this->peg_c3;
              }
              if ($s7 !== $this->peg_FAILED) {
                $s4 = array($s4, $s5, $s6, $s7);
                $s3 = $s4;
              } else {
                $this->peg_currPos = $s3;
                $s3 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s3;
              $s3 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s3;
            $s3 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s3;
          $s3 = $this->peg_c0;
        }
        while ($s3 !== $this->peg_FAILED) {
          $s2[] = $s3;
          $s3 = $this->peg_currPos;
          $s4 = $this->peg_parsewhitespaces();
          if ($s4 === $this->peg_FAILED) {
            $s4 = $this->peg_c3;
          }
          if ($s4 !== $this->peg_FAILED) {
            if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c35) {
              $s5 = $this->peg_c35;
              $this->peg_currPos++;
            } else {
              $s5 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c36); }
            }
            if ($s5 !== $this->peg_FAILED) {
              $s6 = $this->peg_parseLocator();
              if ($s6 !== $this->peg_FAILED) {
                $s7 = $this->peg_parsewhitespaces();
                if ($s7 === $this->peg_FAILED) {
                  $s7 = $this->peg_c3;
                }
                if ($s7 !== $this->peg_FAILED) {
                  $s4 = array($s4, $s5, $s6, $s7);
                  $s3 = $s4;
                } else {
                  $this->peg_currPos = $s3;
                  $s3 = $this->peg_c0;
                }
              } else {
                $this->peg_currPos = $s3;
                $s3 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s3;
              $s3 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s3;
            $s3 = $this->peg_c0;
          }
        }
        if ($s2 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = call_user_func($this->peg_c39,$s1, $s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }

      return $s0;
    }

    private function peg_parseFieldList() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseField();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_c11;
        $s3 = $this->peg_currPos;
        if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c35) {
          $s4 = $this->peg_c35;
          $this->peg_currPos++;
        } else {
          $s4 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c36); }
        }
        if ($s4 !== $this->peg_FAILED) {
          $s5 = $this->peg_parsewhitespaces();
          if ($s5 === $this->peg_FAILED) {
            $s5 = $this->peg_c3;
          }
          if ($s5 !== $this->peg_FAILED) {
            $s6 = $this->peg_parseField();
            if ($s6 !== $this->peg_FAILED) {
              $s4 = array($s4, $s5, $s6);
              $s3 = $s4;
            } else {
              $this->peg_currPos = $s3;
              $s3 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s3;
            $s3 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s3;
          $s3 = $this->peg_c0;
        }
        while ($s3 !== $this->peg_FAILED) {
          $s2[] = $s3;
          $s3 = $this->peg_currPos;
          if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c35) {
            $s4 = $this->peg_c35;
            $this->peg_currPos++;
          } else {
            $s4 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c36); }
          }
          if ($s4 !== $this->peg_FAILED) {
            $s5 = $this->peg_parsewhitespaces();
            if ($s5 === $this->peg_FAILED) {
              $s5 = $this->peg_c3;
            }
            if ($s5 !== $this->peg_FAILED) {
              $s6 = $this->peg_parseField();
              if ($s6 !== $this->peg_FAILED) {
                $s4 = array($s4, $s5, $s6);
                $s3 = $s4;
              } else {
                $this->peg_currPos = $s3;
                $s3 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s3;
              $s3 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s3;
            $s3 = $this->peg_c0;
          }
        }
        if ($s2 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = call_user_func($this->peg_c40,$s1, $s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }

      return $s0;
    }

    private function peg_parseSegmentField() {

      $s0 = $this->peg_parseIdentifier();

      return $s0;
    }

    private function peg_parseField() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseDottedIdentifier();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_currPos;
        $s3 = $this->peg_parse_();
        if ($s3 !== $this->peg_FAILED) {
          if (mb_substr($this->input, $this->peg_currPos, 3, "UTF-8") === $this->peg_c41) {
            $s4 = $this->peg_c41;
            $this->peg_currPos += 3;
          } else {
            $s4 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c42); }
          }
          if ($s4 !== $this->peg_FAILED) {
            $s5 = $this->peg_parse_();
            if ($s5 !== $this->peg_FAILED) {
              $s6 = $this->peg_parsestring();
              if ($s6 !== $this->peg_FAILED) {
                $s3 = array($s3, $s4, $s5, $s6);
                $s2 = $s3;
              } else {
                $this->peg_currPos = $s2;
                $s2 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s2;
              $s2 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s2;
            $s2 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s2;
          $s2 = $this->peg_c0;
        }
        if ($s2 === $this->peg_FAILED) {
          $s2 = $this->peg_c3;
        }
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseFieldBlock();
          if ($s3 === $this->peg_FAILED) {
            $s3 = $this->peg_c3;
          }
          if ($s3 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = call_user_func($this->peg_c43,$s1, $s2, $s3);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_parseSegment();
      }

      return $s0;
    }

    private function peg_parseDottedIdentifier() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c31) {
        $s2 = $this->peg_c31;
        $this->peg_currPos++;
      } else {
        $s2 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c32); }
      }
      if ($s2 === $this->peg_FAILED) {
        $s2 = $this->peg_c3;
      }
      if ($s2 !== $this->peg_FAILED) {
        $s2 = mb_substr($this->input, $s1, $this->peg_currPos - $s1, "UTF-8");
      }
      $s1 = $s2;
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parsevarstart();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_c11;
          $s4 = $this->peg_parsedottedchar();
          while ($s4 !== $this->peg_FAILED) {
            $s3[] = $s4;
            $s4 = $this->peg_parsedottedchar();
          }
          if ($s3 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = call_user_func($this->peg_c44,$s1, $s2, $s3);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }

      return $s0;
    }

    private function peg_parseIdentifier() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c31) {
        $s2 = $this->peg_c31;
        $this->peg_currPos++;
      } else {
        $s2 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c32); }
      }
      if ($s2 === $this->peg_FAILED) {
        $s2 = $this->peg_c3;
      }
      if ($s2 !== $this->peg_FAILED) {
        $s2 = mb_substr($this->input, $s1, $this->peg_currPos - $s1, "UTF-8");
      }
      $s1 = $s2;
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parsevarstart();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_c11;
          $s4 = $this->peg_parsedashedalphanumeric();
          while ($s4 !== $this->peg_FAILED) {
            $s3[] = $s4;
            $s4 = $this->peg_parsedashedalphanumeric();
          }
          if ($s3 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = call_user_func($this->peg_c44,$s1, $s2, $s3);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }

      return $s0;
    }

    private function peg_parseColumnIdentifier() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c31) {
        $s2 = $this->peg_c31;
        $this->peg_currPos++;
      } else {
        $s2 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c32); }
      }
      if ($s2 === $this->peg_FAILED) {
        $s2 = $this->peg_c3;
      }
      if ($s2 !== $this->peg_FAILED) {
        $s2 = mb_substr($this->input, $s1, $this->peg_currPos - $s1, "UTF-8");
      }
      $s1 = $s2;
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parsevarstart();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_c11;
          $s4 = $this->peg_parsealphanumeric();
          while ($s4 !== $this->peg_FAILED) {
            $s3[] = $s4;
            $s4 = $this->peg_parsealphanumeric();
          }
          if ($s3 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = call_user_func($this->peg_c44,$s1, $s2, $s3);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }

      return $s0;
    }

    private function peg_parseOperator() {

      if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c45) {
        $s0 = $this->peg_c45;
        $this->peg_currPos++;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c46); }
      }
      if ($s0 === $this->peg_FAILED) {
        if (mb_substr($this->input, $this->peg_currPos, 2, "UTF-8") === $this->peg_c47) {
          $s0 = $this->peg_c47;
          $this->peg_currPos += 2;
        } else {
          $s0 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c48); }
        }
      }

      return $s0;
    }

    private function peg_parsevarstart() {

      if (peg_regex_test($this->peg_c49, mb_substr($this->input, $this->peg_currPos, 1, "UTF-8"))) {
        $s0 = mb_substr($this->input, $this->peg_currPos, 1, "UTF-8");
        $this->peg_currPos++;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c50); }
      }

      return $s0;
    }

    private function peg_parsedottedchar() {

      if (peg_regex_test($this->peg_c51, mb_substr($this->input, $this->peg_currPos, 1, "UTF-8"))) {
        $s0 = mb_substr($this->input, $this->peg_currPos, 1, "UTF-8");
        $this->peg_currPos++;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c52); }
      }

      return $s0;
    }

    private function peg_parsedashedalphanumeric() {

      if (peg_regex_test($this->peg_c53, mb_substr($this->input, $this->peg_currPos, 1, "UTF-8"))) {
        $s0 = mb_substr($this->input, $this->peg_currPos, 1, "UTF-8");
        $this->peg_currPos++;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c54); }
      }

      return $s0;
    }

    private function peg_parsealphanumeric() {

      if (peg_regex_test($this->peg_c55, mb_substr($this->input, $this->peg_currPos, 1, "UTF-8"))) {
        $s0 = mb_substr($this->input, $this->peg_currPos, 1, "UTF-8");
        $this->peg_currPos++;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c56); }
      }

      return $s0;
    }

    private function peg_parsestring() {

      $s0 = $this->peg_parsestring1();
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_parsestring2();
      }

      return $s0;
    }

    private function peg_parsestring1() {

      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c57) {
        $s1 = $this->peg_c57;
        $this->peg_currPos++;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c58); }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_c11;
        if (peg_regex_test($this->peg_c59, mb_substr($this->input, $this->peg_currPos, 1, "UTF-8"))) {
          $s3 = mb_substr($this->input, $this->peg_currPos, 1, "UTF-8");
          $this->peg_currPos++;
        } else {
          $s3 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c60); }
        }
        if ($s3 === $this->peg_FAILED) {
          $s3 = $this->peg_currPos;
          if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c61) {
            $s4 = $this->peg_c61;
            $this->peg_currPos++;
          } else {
            $s4 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c62); }
          }
          if ($s4 !== $this->peg_FAILED) {
            $s5 = $this->peg_parsenl();
            if ($s5 !== $this->peg_FAILED) {
              $this->peg_reportedPos = $s3;
              $s4 = call_user_func($this->peg_c63,$s5);
              $s3 = $s4;
            } else {
              $this->peg_currPos = $s3;
              $s3 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s3;
            $s3 = $this->peg_c0;
          }
          if ($s3 === $this->peg_FAILED) {
            $s3 = $this->peg_parseescape();
          }
        }
        while ($s3 !== $this->peg_FAILED) {
          $s2[] = $s3;
          if (peg_regex_test($this->peg_c59, mb_substr($this->input, $this->peg_currPos, 1, "UTF-8"))) {
            $s3 = mb_substr($this->input, $this->peg_currPos, 1, "UTF-8");
            $this->peg_currPos++;
          } else {
            $s3 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c60); }
          }
          if ($s3 === $this->peg_FAILED) {
            $s3 = $this->peg_currPos;
            if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c61) {
              $s4 = $this->peg_c61;
              $this->peg_currPos++;
            } else {
              $s4 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c62); }
            }
            if ($s4 !== $this->peg_FAILED) {
              $s5 = $this->peg_parsenl();
              if ($s5 !== $this->peg_FAILED) {
                $this->peg_reportedPos = $s3;
                $s4 = call_user_func($this->peg_c63,$s5);
                $s3 = $s4;
              } else {
                $this->peg_currPos = $s3;
                $s3 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s3;
              $s3 = $this->peg_c0;
            }
            if ($s3 === $this->peg_FAILED) {
              $s3 = $this->peg_parseescape();
            }
          }
        }
        if ($s2 !== $this->peg_FAILED) {
          if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c57) {
            $s3 = $this->peg_c57;
            $this->peg_currPos++;
          } else {
            $s3 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c58); }
          }
          if ($s3 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = call_user_func($this->peg_c64,$s2);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }

      return $s0;
    }

    private function peg_parsestring2() {

      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c65) {
        $s1 = $this->peg_c65;
        $this->peg_currPos++;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c66); }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_c11;
        if (peg_regex_test($this->peg_c67, mb_substr($this->input, $this->peg_currPos, 1, "UTF-8"))) {
          $s3 = mb_substr($this->input, $this->peg_currPos, 1, "UTF-8");
          $this->peg_currPos++;
        } else {
          $s3 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c68); }
        }
        if ($s3 === $this->peg_FAILED) {
          $s3 = $this->peg_currPos;
          if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c61) {
            $s4 = $this->peg_c61;
            $this->peg_currPos++;
          } else {
            $s4 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c62); }
          }
          if ($s4 !== $this->peg_FAILED) {
            $s5 = $this->peg_parsenl();
            if ($s5 !== $this->peg_FAILED) {
              $this->peg_reportedPos = $s3;
              $s4 = call_user_func($this->peg_c63,$s5);
              $s3 = $s4;
            } else {
              $this->peg_currPos = $s3;
              $s3 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s3;
            $s3 = $this->peg_c0;
          }
          if ($s3 === $this->peg_FAILED) {
            $s3 = $this->peg_parseescape();
          }
        }
        while ($s3 !== $this->peg_FAILED) {
          $s2[] = $s3;
          if (peg_regex_test($this->peg_c67, mb_substr($this->input, $this->peg_currPos, 1, "UTF-8"))) {
            $s3 = mb_substr($this->input, $this->peg_currPos, 1, "UTF-8");
            $this->peg_currPos++;
          } else {
            $s3 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c68); }
          }
          if ($s3 === $this->peg_FAILED) {
            $s3 = $this->peg_currPos;
            if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c61) {
              $s4 = $this->peg_c61;
              $this->peg_currPos++;
            } else {
              $s4 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c62); }
            }
            if ($s4 !== $this->peg_FAILED) {
              $s5 = $this->peg_parsenl();
              if ($s5 !== $this->peg_FAILED) {
                $this->peg_reportedPos = $s3;
                $s4 = call_user_func($this->peg_c63,$s5);
                $s3 = $s4;
              } else {
                $this->peg_currPos = $s3;
                $s3 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s3;
              $s3 = $this->peg_c0;
            }
            if ($s3 === $this->peg_FAILED) {
              $s3 = $this->peg_parseescape();
            }
          }
        }
        if ($s2 !== $this->peg_FAILED) {
          if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c65) {
            $s3 = $this->peg_c65;
            $this->peg_currPos++;
          } else {
            $s3 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c66); }
          }
          if ($s3 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = call_user_func($this->peg_c64,$s2);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }

      return $s0;
    }

    private function peg_parseunicode() {

      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c61) {
        $s1 = $this->peg_c61;
        $this->peg_currPos++;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c62); }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_currPos;
        $s3 = $this->peg_currPos;
        $s4 = $this->peg_parsehexDigit();
        if ($s4 !== $this->peg_FAILED) {
          $s5 = $this->peg_parsehexDigit();
          if ($s5 === $this->peg_FAILED) {
            $s5 = $this->peg_c3;
          }
          if ($s5 !== $this->peg_FAILED) {
            $s6 = $this->peg_parsehexDigit();
            if ($s6 === $this->peg_FAILED) {
              $s6 = $this->peg_c3;
            }
            if ($s6 !== $this->peg_FAILED) {
              $s7 = $this->peg_parsehexDigit();
              if ($s7 === $this->peg_FAILED) {
                $s7 = $this->peg_c3;
              }
              if ($s7 !== $this->peg_FAILED) {
                $s8 = $this->peg_parsehexDigit();
                if ($s8 === $this->peg_FAILED) {
                  $s8 = $this->peg_c3;
                }
                if ($s8 !== $this->peg_FAILED) {
                  $s9 = $this->peg_parsehexDigit();
                  if ($s9 === $this->peg_FAILED) {
                    $s9 = $this->peg_c3;
                  }
                  if ($s9 !== $this->peg_FAILED) {
                    $s4 = array($s4, $s5, $s6, $s7, $s8, $s9);
                    $s3 = $s4;
                  } else {
                    $this->peg_currPos = $s3;
                    $s3 = $this->peg_c0;
                  }
                } else {
                  $this->peg_currPos = $s3;
                  $s3 = $this->peg_c0;
                }
              } else {
                $this->peg_currPos = $s3;
                $s3 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s3;
              $s3 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s3;
            $s3 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s3;
          $s3 = $this->peg_c0;
        }
        if ($s3 !== $this->peg_FAILED) {
          $s3 = mb_substr($this->input, $s2, $this->peg_currPos - $s2, "UTF-8");
        }
        $s2 = $s3;
        if ($s2 !== $this->peg_FAILED) {
          if (mb_substr($this->input, $this->peg_currPos, 2, "UTF-8") === $this->peg_c69) {
            $s3 = $this->peg_c69;
            $this->peg_currPos += 2;
          } else {
            $s3 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c70); }
          }
          if ($s3 === $this->peg_FAILED) {
            if (peg_regex_test($this->peg_c71, mb_substr($this->input, $this->peg_currPos, 1, "UTF-8"))) {
              $s3 = mb_substr($this->input, $this->peg_currPos, 1, "UTF-8");
              $this->peg_currPos++;
            } else {
              $s3 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c72); }
            }
          }
          if ($s3 === $this->peg_FAILED) {
            $s3 = $this->peg_c3;
          }
          if ($s3 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = call_user_func($this->peg_c73,$s2);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }

      return $s0;
    }

    private function peg_parseescape() {

      $s0 = $this->peg_parseunicode();
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c61) {
          $s1 = $this->peg_c61;
          $this->peg_currPos++;
        } else {
          $s1 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c62); }
        }
        if ($s1 !== $this->peg_FAILED) {
          if (peg_regex_test($this->peg_c74, mb_substr($this->input, $this->peg_currPos, 1, "UTF-8"))) {
            $s2 = mb_substr($this->input, $this->peg_currPos, 1, "UTF-8");
            $this->peg_currPos++;
          } else {
            $s2 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c75); }
          }
          if ($s2 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = call_user_func($this->peg_c76,$s2);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      }

      return $s0;
    }

    private function peg_parsechars() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_c11;
      $s2 = $this->peg_parsechar();
      if ($s2 !== $this->peg_FAILED) {
        while ($s2 !== $this->peg_FAILED) {
          $s1[] = $s2;
          $s2 = $this->peg_parsechar();
        }
      } else {
        $s1 = $this->peg_c0;
      }
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $s0;
        $s1 = call_user_func($this->peg_c77,$s1);
      }
      $s0 = $s1;

      return $s0;
    }

    private function peg_parsechar() {

      if (peg_regex_test($this->peg_c78, mb_substr($this->input, $this->peg_currPos, 1, "UTF-8"))) {
        $s0 = mb_substr($this->input, $this->peg_currPos, 1, "UTF-8");
        $this->peg_currPos++;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c79); }
      }
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        if (mb_substr($this->input, $this->peg_currPos, 2, "UTF-8") === $this->peg_c80) {
          $s1 = $this->peg_c80;
          $this->peg_currPos += 2;
        } else {
          $s1 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c81); }
        }
        if ($s1 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = call_user_func($this->peg_c82);
        }
        $s0 = $s1;
        if ($s0 === $this->peg_FAILED) {
          $s0 = $this->peg_currPos;
          if (mb_substr($this->input, $this->peg_currPos, 2, "UTF-8") === $this->peg_c83) {
            $s1 = $this->peg_c83;
            $this->peg_currPos += 2;
          } else {
            $s1 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c84); }
          }
          if ($s1 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = call_user_func($this->peg_c85);
          }
          $s0 = $s1;
          if ($s0 === $this->peg_FAILED) {
            $s0 = $this->peg_currPos;
            if (mb_substr($this->input, $this->peg_currPos, 2, "UTF-8") === $this->peg_c86) {
              $s1 = $this->peg_c86;
              $this->peg_currPos += 2;
            } else {
              $s1 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c87); }
            }
            if ($s1 !== $this->peg_FAILED) {
              $this->peg_reportedPos = $s0;
              $s1 = call_user_func($this->peg_c88);
            }
            $s0 = $s1;
            if ($s0 === $this->peg_FAILED) {
              $s0 = $this->peg_currPos;
              if (mb_substr($this->input, $this->peg_currPos, 2, "UTF-8") === $this->peg_c89) {
                $s1 = $this->peg_c89;
                $this->peg_currPos += 2;
              } else {
                $s1 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c90); }
              }
              if ($s1 !== $this->peg_FAILED) {
                $this->peg_reportedPos = $s0;
                $s1 = call_user_func($this->peg_c91);
              }
              $s0 = $s1;
              if ($s0 === $this->peg_FAILED) {
                $s0 = $this->peg_currPos;
                if (mb_substr($this->input, $this->peg_currPos, 2, "UTF-8") === $this->peg_c92) {
                  $s1 = $this->peg_c92;
                  $this->peg_currPos += 2;
                } else {
                  $s1 = $this->peg_FAILED;
                  if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c93); }
                }
                if ($s1 !== $this->peg_FAILED) {
                  $this->peg_reportedPos = $s0;
                  $s1 = call_user_func($this->peg_c94);
                }
                $s0 = $s1;
                if ($s0 === $this->peg_FAILED) {
                  $s0 = $this->peg_currPos;
                  if (mb_substr($this->input, $this->peg_currPos, 2, "UTF-8") === $this->peg_c95) {
                    $s1 = $this->peg_c95;
                    $this->peg_currPos += 2;
                  } else {
                    $s1 = $this->peg_FAILED;
                    if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c96); }
                  }
                  if ($s1 !== $this->peg_FAILED) {
                    $this->peg_reportedPos = $s0;
                    $s1 = call_user_func($this->peg_c97);
                  }
                  $s0 = $s1;
                  if ($s0 === $this->peg_FAILED) {
                    $s0 = $this->peg_currPos;
                    if (mb_substr($this->input, $this->peg_currPos, 2, "UTF-8") === $this->peg_c98) {
                      $s1 = $this->peg_c98;
                      $this->peg_currPos += 2;
                    } else {
                      $s1 = $this->peg_FAILED;
                      if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c99); }
                    }
                    if ($s1 !== $this->peg_FAILED) {
                      $this->peg_reportedPos = $s0;
                      $s1 = call_user_func($this->peg_c100);
                    }
                    $s0 = $s1;
                    if ($s0 === $this->peg_FAILED) {
                      $s0 = $this->peg_currPos;
                      if (mb_substr($this->input, $this->peg_currPos, 2, "UTF-8") === $this->peg_c101) {
                        $s1 = $this->peg_c101;
                        $this->peg_currPos += 2;
                      } else {
                        $s1 = $this->peg_FAILED;
                        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c102); }
                      }
                      if ($s1 !== $this->peg_FAILED) {
                        $this->peg_reportedPos = $s0;
                        $s1 = call_user_func($this->peg_c103);
                      }
                      $s0 = $s1;
                      if ($s0 === $this->peg_FAILED) {
                        $s0 = $this->peg_currPos;
                        if (mb_substr($this->input, $this->peg_currPos, 2, "UTF-8") === $this->peg_c104) {
                          $s1 = $this->peg_c104;
                          $this->peg_currPos += 2;
                        } else {
                          $s1 = $this->peg_FAILED;
                          if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c105); }
                        }
                        if ($s1 !== $this->peg_FAILED) {
                          $s2 = $this->peg_currPos;
                          $s3 = $this->peg_currPos;
                          $s4 = $this->peg_parsehexDigit();
                          if ($s4 !== $this->peg_FAILED) {
                            $s5 = $this->peg_parsehexDigit();
                            if ($s5 !== $this->peg_FAILED) {
                              $s6 = $this->peg_parsehexDigit();
                              if ($s6 !== $this->peg_FAILED) {
                                $s7 = $this->peg_parsehexDigit();
                                if ($s7 !== $this->peg_FAILED) {
                                  $s4 = array($s4, $s5, $s6, $s7);
                                  $s3 = $s4;
                                } else {
                                  $this->peg_currPos = $s3;
                                  $s3 = $this->peg_c0;
                                }
                              } else {
                                $this->peg_currPos = $s3;
                                $s3 = $this->peg_c0;
                              }
                            } else {
                              $this->peg_currPos = $s3;
                              $s3 = $this->peg_c0;
                            }
                          } else {
                            $this->peg_currPos = $s3;
                            $s3 = $this->peg_c0;
                          }
                          if ($s3 !== $this->peg_FAILED) {
                            $s3 = mb_substr($this->input, $s2, $this->peg_currPos - $s2, "UTF-8");
                          }
                          $s2 = $s3;
                          if ($s2 !== $this->peg_FAILED) {
                            $this->peg_reportedPos = $s0;
                            $s1 = call_user_func($this->peg_c106,$s2);
                            $s0 = $s1;
                          } else {
                            $this->peg_currPos = $s0;
                            $s0 = $this->peg_c0;
                          }
                        } else {
                          $this->peg_currPos = $s0;
                          $s0 = $this->peg_c0;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return $s0;
    }

    private function peg_parseValue() {

      $s0 = $this->peg_parsefalse();
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_parsenull();
        if ($s0 === $this->peg_FAILED) {
          $s0 = $this->peg_parsetrue();
          if ($s0 === $this->peg_FAILED) {
            $s0 = $this->peg_parsenum();
            if ($s0 === $this->peg_FAILED) {
              $s0 = $this->peg_parsestring();
            }
          }
        }
      }

      return $s0;
    }

    private function peg_parsefalse() {

      if (mb_substr($this->input, $this->peg_currPos, 5, "UTF-8") === $this->peg_c107) {
        $s0 = $this->peg_c107;
        $this->peg_currPos += 5;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c108); }
      }

      return $s0;
    }

    private function peg_parsetrue() {

      if (mb_substr($this->input, $this->peg_currPos, 4, "UTF-8") === $this->peg_c109) {
        $s0 = $this->peg_c109;
        $this->peg_currPos += 4;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c110); }
      }

      return $s0;
    }

    private function peg_parsenull() {

      if (mb_substr($this->input, $this->peg_currPos, 4, "UTF-8") === $this->peg_c111) {
        $s0 = $this->peg_c111;
        $this->peg_currPos += 4;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c112); }
      }

      return $s0;
    }

    private function peg_parsenum() {

      $s0 = $this->peg_currPos;
      if (peg_regex_test($this->peg_c113, mb_substr($this->input, $this->peg_currPos, 1, "UTF-8"))) {
        $s1 = mb_substr($this->input, $this->peg_currPos, 1, "UTF-8");
        $this->peg_currPos++;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c114); }
      }
      if ($s1 === $this->peg_FAILED) {
        $s1 = $this->peg_c3;
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_c11;
        if (peg_regex_test($this->peg_c115, mb_substr($this->input, $this->peg_currPos, 1, "UTF-8"))) {
          $s3 = mb_substr($this->input, $this->peg_currPos, 1, "UTF-8");
          $this->peg_currPos++;
        } else {
          $s3 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c116); }
        }
        if ($s3 !== $this->peg_FAILED) {
          while ($s3 !== $this->peg_FAILED) {
            $s2[] = $s3;
            if (peg_regex_test($this->peg_c115, mb_substr($this->input, $this->peg_currPos, 1, "UTF-8"))) {
              $s3 = mb_substr($this->input, $this->peg_currPos, 1, "UTF-8");
              $this->peg_currPos++;
            } else {
              $s3 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c116); }
            }
          }
        } else {
          $s2 = $this->peg_c0;
        }
        if ($s2 === $this->peg_FAILED) {
          $s2 = $this->peg_currPos;
          $s3 = $this->peg_c11;
          if (peg_regex_test($this->peg_c115, mb_substr($this->input, $this->peg_currPos, 1, "UTF-8"))) {
            $s4 = mb_substr($this->input, $this->peg_currPos, 1, "UTF-8");
            $this->peg_currPos++;
          } else {
            $s4 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c116); }
          }
          while ($s4 !== $this->peg_FAILED) {
            $s3[] = $s4;
            if (peg_regex_test($this->peg_c115, mb_substr($this->input, $this->peg_currPos, 1, "UTF-8"))) {
              $s4 = mb_substr($this->input, $this->peg_currPos, 1, "UTF-8");
              $this->peg_currPos++;
            } else {
              $s4 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c116); }
            }
          }
          if ($s3 !== $this->peg_FAILED) {
            if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c21) {
              $s4 = $this->peg_c21;
              $this->peg_currPos++;
            } else {
              $s4 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c22); }
            }
            if ($s4 !== $this->peg_FAILED) {
              $s5 = $this->peg_c11;
              if (peg_regex_test($this->peg_c115, mb_substr($this->input, $this->peg_currPos, 1, "UTF-8"))) {
                $s6 = mb_substr($this->input, $this->peg_currPos, 1, "UTF-8");
                $this->peg_currPos++;
              } else {
                $s6 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c116); }
              }
              if ($s6 !== $this->peg_FAILED) {
                while ($s6 !== $this->peg_FAILED) {
                  $s5[] = $s6;
                  if (peg_regex_test($this->peg_c115, mb_substr($this->input, $this->peg_currPos, 1, "UTF-8"))) {
                    $s6 = mb_substr($this->input, $this->peg_currPos, 1, "UTF-8");
                    $this->peg_currPos++;
                  } else {
                    $s6 = $this->peg_FAILED;
                    if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c116); }
                  }
                }
              } else {
                $s5 = $this->peg_c0;
              }
              if ($s5 !== $this->peg_FAILED) {
                $s3 = array($s3, $s4, $s5);
                $s2 = $s3;
              } else {
                $this->peg_currPos = $s2;
                $s2 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s2;
              $s2 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s2;
            $s2 = $this->peg_c0;
          }
        }
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_currPos;
          if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c117) {
            $s4 = $this->peg_c117;
            $this->peg_currPos++;
          } else {
            $s4 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c118); }
          }
          if ($s4 !== $this->peg_FAILED) {
            if (peg_regex_test($this->peg_c113, mb_substr($this->input, $this->peg_currPos, 1, "UTF-8"))) {
              $s5 = mb_substr($this->input, $this->peg_currPos, 1, "UTF-8");
              $this->peg_currPos++;
            } else {
              $s5 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c114); }
            }
            if ($s5 === $this->peg_FAILED) {
              $s5 = $this->peg_c3;
            }
            if ($s5 !== $this->peg_FAILED) {
              $s6 = $this->peg_c11;
              if (peg_regex_test($this->peg_c115, mb_substr($this->input, $this->peg_currPos, 1, "UTF-8"))) {
                $s7 = mb_substr($this->input, $this->peg_currPos, 1, "UTF-8");
                $this->peg_currPos++;
              } else {
                $s7 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c116); }
              }
              if ($s7 !== $this->peg_FAILED) {
                while ($s7 !== $this->peg_FAILED) {
                  $s6[] = $s7;
                  if (peg_regex_test($this->peg_c115, mb_substr($this->input, $this->peg_currPos, 1, "UTF-8"))) {
                    $s7 = mb_substr($this->input, $this->peg_currPos, 1, "UTF-8");
                    $this->peg_currPos++;
                  } else {
                    $s7 = $this->peg_FAILED;
                    if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c116); }
                  }
                }
              } else {
                $s6 = $this->peg_c0;
              }
              if ($s6 !== $this->peg_FAILED) {
                $s4 = array($s4, $s5, $s6);
                $s3 = $s4;
              } else {
                $this->peg_currPos = $s3;
                $s3 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s3;
              $s3 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s3;
            $s3 = $this->peg_c0;
          }
          if ($s3 === $this->peg_FAILED) {
            $s3 = $this->peg_c3;
          }
          if ($s3 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = call_user_func($this->peg_c119);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }

      return $s0;
    }

    private function peg_parseint() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parsedigit19();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parsedigits();
        if ($s2 !== $this->peg_FAILED) {
          $s1 = array($s1, $s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_parsedigit();
        if ($s0 === $this->peg_FAILED) {
          $s0 = $this->peg_currPos;
          if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c31) {
            $s1 = $this->peg_c31;
            $this->peg_currPos++;
          } else {
            $s1 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c32); }
          }
          if ($s1 !== $this->peg_FAILED) {
            $s2 = $this->peg_parsedigit19();
            if ($s2 !== $this->peg_FAILED) {
              $s3 = $this->peg_parsedigits();
              if ($s3 !== $this->peg_FAILED) {
                $s1 = array($s1, $s2, $s3);
                $s0 = $s1;
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c0;
          }
          if ($s0 === $this->peg_FAILED) {
            $s0 = $this->peg_currPos;
            if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c31) {
              $s1 = $this->peg_c31;
              $this->peg_currPos++;
            } else {
              $s1 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c32); }
            }
            if ($s1 !== $this->peg_FAILED) {
              $s2 = $this->peg_parsedigit();
              if ($s2 !== $this->peg_FAILED) {
                $s1 = array($s1, $s2);
                $s0 = $s1;
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_c0;
            }
          }
        }
      }

      return $s0;
    }

    private function peg_parsefrac() {

      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c21) {
        $s1 = $this->peg_c21;
        $this->peg_currPos++;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c22); }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parsedigits();
        if ($s2 !== $this->peg_FAILED) {
          $s1 = array($s1, $s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }

      return $s0;
    }

    private function peg_parseexp() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parsee();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parsedigits();
        if ($s2 !== $this->peg_FAILED) {
          $s1 = array($s1, $s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }

      return $s0;
    }

    private function peg_parsedigits() {

      $s0 = $this->peg_c11;
      $s1 = $this->peg_parsedigit();
      if ($s1 !== $this->peg_FAILED) {
        while ($s1 !== $this->peg_FAILED) {
          $s0[] = $s1;
          $s1 = $this->peg_parsedigit();
        }
      } else {
        $s0 = $this->peg_c0;
      }

      return $s0;
    }

    private function peg_parsee() {

      $s0 = $this->peg_currPos;
      if (peg_regex_test($this->peg_c120, mb_substr($this->input, $this->peg_currPos, 1, "UTF-8"))) {
        $s1 = mb_substr($this->input, $this->peg_currPos, 1, "UTF-8");
        $this->peg_currPos++;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c121); }
      }
      if ($s1 !== $this->peg_FAILED) {
        if (peg_regex_test($this->peg_c113, mb_substr($this->input, $this->peg_currPos, 1, "UTF-8"))) {
          $s2 = mb_substr($this->input, $this->peg_currPos, 1, "UTF-8");
          $this->peg_currPos++;
        } else {
          $s2 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c114); }
        }
        if ($s2 === $this->peg_FAILED) {
          $s2 = $this->peg_c3;
        }
        if ($s2 !== $this->peg_FAILED) {
          $s1 = array($s1, $s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }

      return $s0;
    }

    private function peg_parsedigit() {

      if (peg_regex_test($this->peg_c115, mb_substr($this->input, $this->peg_currPos, 1, "UTF-8"))) {
        $s0 = mb_substr($this->input, $this->peg_currPos, 1, "UTF-8");
        $this->peg_currPos++;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c116); }
      }

      return $s0;
    }

    private function peg_parsedigit19() {

      if (peg_regex_test($this->peg_c122, mb_substr($this->input, $this->peg_currPos, 1, "UTF-8"))) {
        $s0 = mb_substr($this->input, $this->peg_currPos, 1, "UTF-8");
        $this->peg_currPos++;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c123); }
      }

      return $s0;
    }

    private function peg_parsehexDigit() {

      if (peg_regex_test($this->peg_c124, mb_substr($this->input, $this->peg_currPos, 1, "UTF-8"))) {
        $s0 = mb_substr($this->input, $this->peg_currPos, 1, "UTF-8");
        $this->peg_currPos++;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c125); }
      }

      return $s0;
    }

    private function peg_parse_() {

      $this->peg_silentFails++;
      $s0 = $this->peg_c11;
      $s1 = $this->peg_parsewhitespace();
      while ($s1 !== $this->peg_FAILED) {
        $s0[] = $s1;
        $s1 = $this->peg_parsewhitespace();
      }
      $this->peg_silentFails--;
      if ($s0 === $this->peg_FAILED) {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c126); }
      }

      return $s0;
    }

    private function peg_parsewhitespace() {

      if (peg_regex_test($this->peg_c127, mb_substr($this->input, $this->peg_currPos, 1, "UTF-8"))) {
        $s0 = mb_substr($this->input, $this->peg_currPos, 1, "UTF-8");
        $this->peg_currPos++;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c128); }
      }

      return $s0;
    }

    private function peg_parsewhitespaces() {

      $s0 = $this->peg_c11;
      $s1 = $this->peg_parsewhitespace();
      while ($s1 !== $this->peg_FAILED) {
        $s0[] = $s1;
        $s1 = $this->peg_parsewhitespace();
      }

      return $s0;
    }

    private function peg_parsenl() {

      if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c129) {
        $s0 = $this->peg_c129;
        $this->peg_currPos++;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c130); }
      }
      if ($s0 === $this->peg_FAILED) {
        if (mb_substr($this->input, $this->peg_currPos, 2, "UTF-8") === $this->peg_c69) {
          $s0 = $this->peg_c69;
          $this->peg_currPos += 2;
        } else {
          $s0 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c70); }
        }
        if ($s0 === $this->peg_FAILED) {
          if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c131) {
            $s0 = $this->peg_c131;
            $this->peg_currPos++;
          } else {
            $s0 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c132); }
          }
          if ($s0 === $this->peg_FAILED) {
            if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c133) {
              $s0 = $this->peg_c133;
              $this->peg_currPos++;
            } else {
              $s0 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c134); }
            }
          }
        }
      }

      return $s0;
    }

  public function parse($input) {
    $arguments = func_get_args();
    $options = count($arguments) > 1 ? $arguments[1] : array();
    $this->cleanup_state();
    $this->input = $input;
    $old_regex_encoding = mb_regex_encoding();
    mb_regex_encoding("UTF-8");

    $this->peg_FAILED = new \stdClass;
    $this->peg_c0 = $this->peg_FAILED;
    $this->peg_c1 = "/";
    $this->peg_c2 = array( "type" => "literal", "value" => "/", "description" => "\"/\"" );
    $this->peg_c3 = null;
    $this->peg_c4 = "[";
    $this->peg_c5 = array( "type" => "literal", "value" => "[", "description" => "\"[\"" );
    $this->peg_c6 = "]";
    $this->peg_c7 = array( "type" => "literal", "value" => "]", "description" => "\"]\"" );
    $this->peg_c8 = function($segment,$ids,$functions,$fields,$conditions) { return array( "name" => $segment, "type" => 'Segment', "ids" => $ids? $ids[1] : null, "functions" => $functions, "fields" => $fields, "conditions" => $conditions ); };
    $this->peg_c9 = "?";
    $this->peg_c10 = array( "type" => "literal", "value" => "?", "description" => "\"?\"" );
    $this->peg_c11 = array();
    $this->peg_c12 = "&";
    $this->peg_c13 = array( "type" => "literal", "value" => "&", "description" => "\"&\"" );
    $this->peg_c14 = function($first,$rest) { return buildList($first, $rest, 1); };
    $this->peg_c15 = function($left,$operator,$right) { return array( "left" => $left, "operator" => $operator, "right" => "right" ); };
    $this->peg_c16 = "{";
    $this->peg_c17 = array( "type" => "literal", "value" => "{", "description" => "\"{\"" );
    $this->peg_c18 = "}";
    $this->peg_c19 = array( "type" => "literal", "value" => "}", "description" => "\"}\"" );
    $this->peg_c20 = function($fields) { return $fields; };
    $this->peg_c21 = ".";
    $this->peg_c22 = array( "type" => "literal", "value" => ".", "description" => "\".\"" );
    $this->peg_c23 = function($functions) { return extractList($functions, 1); };
    $this->peg_c24 = "sort";
    $this->peg_c25 = array( "type" => "literal", "value" => "sort", "description" => "\"sort\"" );
    $this->peg_c26 = "(";
    $this->peg_c27 = array( "type" => "literal", "value" => "(", "description" => "\"(\"" );
    $this->peg_c28 = ")";
    $this->peg_c29 = array( "type" => "literal", "value" => ")", "description" => "\")\"" );
    $this->peg_c30 = function($name,$params) { return array( "type" => 'Function', "name" => $name, "arguments" => $params ); };
    $this->peg_c31 = "-";
    $this->peg_c32 = array( "type" => "literal", "value" => "-", "description" => "\"-\"" );
    $this->peg_c33 = "+";
    $this->peg_c34 = array( "type" => "literal", "value" => "+", "description" => "\"+\"" );
    $this->peg_c35 = ",";
    $this->peg_c36 = array( "type" => "literal", "value" => ",", "description" => "\",\"" );
    $this->peg_c37 = function($first,$rest) {
           return buildList($first, $rest, 1);
         };
    $this->peg_c38 = function($first,$rest) {
           return buildList($first, $rest, 2);
         };
    $this->peg_c39 = function($first,$rest) {
           return buildList($first, $rest, 3);
         };
    $this->peg_c40 = function($first,$rest) {
          return buildList($first, $rest, 2);
        };
    $this->peg_c41 = ":as";
    $this->peg_c42 = array( "type" => "literal", "value" => ":as", "description" => "\":as\"" );
    $this->peg_c43 = function($name,$alias,$fields) {
        $result = array( "name" => $name );
        if ($alias) {
          $result["alias"] = $alias[3];
        }
        if (!empty($fields)) {
          $result["fields"] = $fields;
        }
        return $result;
      };
    $this->peg_c44 = function($prefix,$start,$chars) {
        return $prefix . $start . join("", $chars);
      };
    $this->peg_c45 = "=";
    $this->peg_c46 = array( "type" => "literal", "value" => "=", "description" => "\"=\"" );
    $this->peg_c47 = "=~";
    $this->peg_c48 = array( "type" => "literal", "value" => "=~", "description" => "\"=~\"" );
    $this->peg_c49 = "/^[_a-z]/i";
    $this->peg_c50 = array( "type" => "class", "value" => "[_a-z]i", "description" => "[_a-z]i" );
    $this->peg_c51 = "/^[_a-z0-9-.]/i";
    $this->peg_c52 = array( "type" => "class", "value" => "[_a-z0-9\\-.]i", "description" => "[_a-z0-9\\-.]i" );
    $this->peg_c53 = "/^[_a-z0-9-]/i";
    $this->peg_c54 = array( "type" => "class", "value" => "[_a-z0-9\\-]i", "description" => "[_a-z0-9\\-]i" );
    $this->peg_c55 = "/^[_a-z0-9]/i";
    $this->peg_c56 = array( "type" => "class", "value" => "[_a-z0-9]i", "description" => "[_a-z0-9]i" );
    $this->peg_c57 = "\"";
    $this->peg_c58 = array( "type" => "literal", "value" => "\"", "description" => "\"\\\"\"" );
    $this->peg_c59 = "/^[^\\n\\r\\f\\\\\"]/";
    $this->peg_c60 = array( "type" => "class", "value" => "[^\\n\\r\\f\\\\\"]", "description" => "[^\\n\\r\\f\\\\\"]" );
    $this->peg_c61 = "\\";
    $this->peg_c62 = array( "type" => "literal", "value" => "\\", "description" => "\"\\\\\"" );
    $this->peg_c63 = function($nl) { return ""; };
    $this->peg_c64 = function($chars) {
          return join("", $chars);
        };
    $this->peg_c65 = "'";
    $this->peg_c66 = array( "type" => "literal", "value" => "'", "description" => "\"'\"" );
    $this->peg_c67 = "/^[^\\n\\r\\f\\\\']/";
    $this->peg_c68 = array( "type" => "class", "value" => "[^\\n\\r\\f\\\\']", "description" => "[^\\n\\r\\f\\\\']" );
    $this->peg_c69 = "\r\n";
    $this->peg_c70 = array( "type" => "literal", "value" => "\r\n", "description" => "\"\\r\\n\"" );
    $this->peg_c71 = "/^[ \\t\\r\\n\\f]/";
    $this->peg_c72 = array( "type" => "class", "value" => "[ \\t\\r\\n\\f]", "description" => "[ \\t\\r\\n\\f]" );
    $this->peg_c73 = function($digits) {
          return String.fromCharCode(parseInt(digits, 16));
        };
    $this->peg_c74 = "/^[^\\r\\n\\f0-9a-f]/i";
    $this->peg_c75 = array( "type" => "class", "value" => "[^\\r\\n\\f0-9a-f]i", "description" => "[^\\r\\n\\f0-9a-f]i" );
    $this->peg_c76 = function($ch) { return ch; };
    $this->peg_c77 = function($chars) { return join("", $chars); };
    $this->peg_c78 = "/^[^\"\\\\\\0-\\x1F]/";
    $this->peg_c79 = array( "type" => "class", "value" => "[^\"\\\\\\0-\\x1F]", "description" => "[^\"\\\\\\0-\\x1F]" );
    $this->peg_c80 = "\\\"";
    $this->peg_c81 = array( "type" => "literal", "value" => "\\\"", "description" => "\"\\\\\\\"\"" );
    $this->peg_c82 = function() { return '"';  };
    $this->peg_c83 = "\\\\";
    $this->peg_c84 = array( "type" => "literal", "value" => "\\\\", "description" => "\"\\\\\\\\\"" );
    $this->peg_c85 = function() { return "\\"; };
    $this->peg_c86 = "\\/";
    $this->peg_c87 = array( "type" => "literal", "value" => "\\/", "description" => "\"\\\\/\"" );
    $this->peg_c88 = function() { return "/";  };
    $this->peg_c89 = "\\b";
    $this->peg_c90 = array( "type" => "literal", "value" => "\\b", "description" => "\"\\\\b\"" );
    $this->peg_c91 = function() { return "\b"; };
    $this->peg_c92 = "\\f";
    $this->peg_c93 = array( "type" => "literal", "value" => "\\f", "description" => "\"\\\\f\"" );
    $this->peg_c94 = function() { return "\f"; };
    $this->peg_c95 = "\\n";
    $this->peg_c96 = array( "type" => "literal", "value" => "\\n", "description" => "\"\\\\n\"" );
    $this->peg_c97 = function() { return "\n"; };
    $this->peg_c98 = "\\r";
    $this->peg_c99 = array( "type" => "literal", "value" => "\\r", "description" => "\"\\\\r\"" );
    $this->peg_c100 = function() { return "\r"; };
    $this->peg_c101 = "\\t";
    $this->peg_c102 = array( "type" => "literal", "value" => "\\t", "description" => "\"\\\\t\"" );
    $this->peg_c103 = function() { return "\t"; };
    $this->peg_c104 = "\\u";
    $this->peg_c105 = array( "type" => "literal", "value" => "\\u", "description" => "\"\\\\u\"" );
    $this->peg_c106 = function($digits) {
          return chr_unicode(intval($digits, 16));
        };
    $this->peg_c107 = "false";
    $this->peg_c108 = array( "type" => "literal", "value" => "false", "description" => "\"false\"" );
    $this->peg_c109 = "true";
    $this->peg_c110 = array( "type" => "literal", "value" => "true", "description" => "\"true\"" );
    $this->peg_c111 = "null";
    $this->peg_c112 = array( "type" => "literal", "value" => "null", "description" => "\"null\"" );
    $this->peg_c113 = "/^[+-]/";
    $this->peg_c114 = array( "type" => "class", "value" => "[+\\-]", "description" => "[+\\-]" );
    $this->peg_c115 = "/^[0-9]/";
    $this->peg_c116 = array( "type" => "class", "value" => "[0-9]", "description" => "[0-9]" );
    $this->peg_c117 = "e";
    $this->peg_c118 = array( "type" => "literal", "value" => "e", "description" => "\"e\"" );
    $this->peg_c119 = function() {
          return parseFloat(text());
        };
    $this->peg_c120 = "/^[eE]/";
    $this->peg_c121 = array( "type" => "class", "value" => "[eE]", "description" => "[eE]" );
    $this->peg_c122 = "/^[1-9]/";
    $this->peg_c123 = array( "type" => "class", "value" => "[1-9]", "description" => "[1-9]" );
    $this->peg_c124 = "/^[0-9a-fA-F]/";
    $this->peg_c125 = array( "type" => "class", "value" => "[0-9a-fA-F]", "description" => "[0-9a-fA-F]" );
    $this->peg_c126 = array("type" => "other", "description" => "whitespace" );
    $this->peg_c127 = "/^[ \\t\\n\\r]/";
    $this->peg_c128 = array( "type" => "class", "value" => "[ \\t\\n\\r]", "description" => "[ \\t\\n\\r]" );
    $this->peg_c129 = "\n";
    $this->peg_c130 = array( "type" => "literal", "value" => "\n", "description" => "\"\\n\"" );
    $this->peg_c131 = "\r";
    $this->peg_c132 = array( "type" => "literal", "value" => "\r", "description" => "\"\\r\"" );
    $this->peg_c133 = "\f";
    $this->peg_c134 = array( "type" => "literal", "value" => "\f", "description" => "\"\\f\"" );

    $peg_startRuleFunctions = array( 'start' => array($this, "peg_parsestart") );
    $peg_startRuleFunction  = array($this, "peg_parsestart");
    if (isset($options["startRule"])) {
      if (!(isset($peg_startRuleFunctions[$options["startRule"]]))) {
        throw new \Exception("Can't start parsing from rule \"" + $options["startRule"] + "\".");
      }

      $peg_startRuleFunction = $peg_startRuleFunctions[$options["startRule"]];
    }

      if (!function_exists('\fitch\parser\extractList')) {
        function extractList($list, $index) {
          $len = count($list);
          $result = array();

          for ($i = 0; $i < $len; $i++) {
            $result[$i] = $list[$i][$index];
          }

          return $result;
        }
      }



      if (!function_exists('\fitch\parser\buildList')) {
        function buildList($first, $rest, $index) {
          return array_merge(array($first),extractList($rest, $index));
        }
      }


    $peg_result = call_user_func($peg_startRuleFunction);

    mb_regex_encoding($old_regex_encoding);
    if ($peg_result !== $this->peg_FAILED && $this->peg_currPos === mb_strlen($input, "UTF-8")) {
      return $peg_result;
    } else {
      if ($peg_result !== $this->peg_FAILED && $this->peg_currPos < mb_strlen($input, "UTF-8")) {
        $this->peg_fail(array("type" => "end", "description" => "end of input" ));
      }

      throw $this->peg_buildException(null, $this->peg_maxFailExpected, $this->peg_maxFailPos);
    }
  }

};